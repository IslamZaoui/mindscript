datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
}

model User {
  id             String   @id @default(nanoid(16))
  username       String   @unique
  email          String   @unique
  githubId       Int?     @unique
  emailVerified  Boolean  @default(false)
  hashedPassword String?
  bio            String?
  location       String?
  website        String?
  image          String?
  createdAt      DateTime @default(now())

  sessions                 Session[]
  EmailVerificationRequest EmailVerificationRequest[]
  PasswordResetSession     PasswordResetSession[]
  Post                     Post[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationRequest {
  id        String   @id @default(nanoid(16))
  userId    String
  email     String
  code      String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  email     String
  code      String

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Post {
  id          String   @id @default(nanoid(16))
  title       String
  description String
  content     String
  tags        String[]
  published   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  Analytics Analytics?
}

model Analytics {
  id        String   @id @default(nanoid(16))
  postId    String   @unique
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(references: [id], fields: [postId], onDelete: Cascade)
}
